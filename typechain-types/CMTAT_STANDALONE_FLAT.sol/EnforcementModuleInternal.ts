/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface EnforcementModuleInternalInterface extends utils.Interface {
  functions: {
    "frozen(address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "frozen"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "frozen",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;

  events: {
    "Freeze(address,address,string,string)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Unfreeze(address,address,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Freeze"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unfreeze"): EventFragment;
}

export interface FreezeEventObject {
  enforcer: string;
  owner: string;
  reasonIndexed: string;
  reason: string;
}
export type FreezeEvent = TypedEvent<
  [string, string, string, string],
  FreezeEventObject
>;

export type FreezeEventFilter = TypedEventFilter<FreezeEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface UnfreezeEventObject {
  enforcer: string;
  owner: string;
  reasonIndexed: string;
  reason: string;
}
export type UnfreezeEvent = TypedEvent<
  [string, string, string, string],
  UnfreezeEventObject
>;

export type UnfreezeEventFilter = TypedEventFilter<UnfreezeEvent>;

export interface EnforcementModuleInternal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EnforcementModuleInternalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    frozen(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  frozen(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    frozen(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Freeze(address,address,string,string)"(
      enforcer?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      reasonIndexed?: PromiseOrValue<string> | null,
      reason?: null
    ): FreezeEventFilter;
    Freeze(
      enforcer?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      reasonIndexed?: PromiseOrValue<string> | null,
      reason?: null
    ): FreezeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Unfreeze(address,address,string,string)"(
      enforcer?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      reasonIndexed?: PromiseOrValue<string> | null,
      reason?: null
    ): UnfreezeEventFilter;
    Unfreeze(
      enforcer?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      reasonIndexed?: PromiseOrValue<string> | null,
      reason?: null
    ): UnfreezeEventFilter;
  };

  estimateGas: {
    frozen(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    frozen(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
