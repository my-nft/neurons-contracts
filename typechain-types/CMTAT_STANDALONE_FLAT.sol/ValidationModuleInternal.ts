/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ValidationModuleInternalInterface extends utils.Interface {
  functions: {
    "ruleEngine()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "ruleEngine"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ruleEngine",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ruleEngine", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "RuleEngineSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RuleEngineSet"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RuleEngineSetEventObject {
  newRuleEngine: string;
}
export type RuleEngineSetEvent = TypedEvent<[string], RuleEngineSetEventObject>;

export type RuleEngineSetEventFilter = TypedEventFilter<RuleEngineSetEvent>;

export interface ValidationModuleInternal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ValidationModuleInternalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ruleEngine(overrides?: CallOverrides): Promise<[string]>;
  };

  ruleEngine(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ruleEngine(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RuleEngineSet(address)"(
      newRuleEngine?: PromiseOrValue<string> | null
    ): RuleEngineSetEventFilter;
    RuleEngineSet(
      newRuleEngine?: PromiseOrValue<string> | null
    ): RuleEngineSetEventFilter;
  };

  estimateGas: {
    ruleEngine(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ruleEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
